generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  email         String?       @unique(map: "User.email_unique")
  firstName     String?
  lastName      String?
  locale        String        @default("en")
  picture       String?
  auth0Sub      String?       @unique(map: "User.auth0Sub_unique")
  emailVerified Boolean       @default(false)
  type          UserType      @default(USER)
  posts         Post[]
  socialLogin   SocialLogin[]
}

model Post {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  type            PostType
  text            String
  key             String
  geoJson         Json?
  totalDistance   Float      @default(0)
  elapsedTime     Int        @default(0)
  totalSprintTime Int        @default(0)
  maxSpeed        Float      @default(0)
  averageSpeed    Float      @default(0)
  userId          Int
  sprints         Json?
  runs            Json?
  startTime       DateTime?
  fieldId         Int?
  image           String?
  mapImageUrl     String?
  halfTime        Int        @default(-1)
  status          PostStatus @default(INIT)
  statusInfo      String     @default("")
  Field           Field?     @relation(fields: [fieldId], references: [id])
  User            User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([key, type], map: "Post.key_type_unique")
}

model StravaWebhookEvent {
  id        Int                      @id @default(autoincrement())
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  status    StravaWebhookEventStatus
  body      String
  errors    String[]
}

enum StravaWebhookEventStatus {
  PENDING
  ERRORED
  COMPLETED
}

model SocialLogin {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  platform      Platform
  platformId    String   @unique(map: "SocialLogin.platformId_unique")
  platformMeta  String
  accessToken   String
  refreshToken  String
  userId        Int
  expiresAt     DateTime
  platformScope String
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Field {
  id          Int        @id @default(autoincrement())
  name        String
  topLeft     Float[]
  topRight    Float[]
  bottomRight Float[]
  bottomLeft  Float[]
  city        String
  usage       FieldUsage
  address     String?
  zoom        Float      @default(17.5)
  Post        Post[]
}

enum FieldUsage {
  TOP_HALF
  BOTTOM_HALF
  FULL_FIELD
}

enum PostType {
  STRAVA_ACTIVITY
}

enum PostStatus {
  ERROR
  COMPLETED
  PROCESSING
  INIT
}

enum Platform {
  STRAVA
}

enum UserType {
  USER
  ADMIN
}
