/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

export type Error = {
  /**
   * @description The code associated with this error.
   * @type string | undefined
   */
  code?: string | undefined
  /**
   * @description The specific field or aspect of the resource associated with this error.
   * @type string | undefined
   */
  field?: string | undefined
  /**
   * @description The type of resource associated with this error.
   * @type string | undefined
   */
  resource?: string | undefined
}

/**
 * @description Encapsulates the errors that may be returned from the API.
 */
export type Fault = {
  /**
   * @description The set of specific errors associated with this fault, if any.
   * @type array | undefined
   */
  errors?: Error[] | undefined
  /**
   * @description The message of the fault.
   * @type string | undefined
   */
  message?: string | undefined
}

/**
 * @description A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
 */
export type ActivityTotal = {
  /**
   * @description The number of activities considered in this total.
   * @type integer | undefined
   */
  count?: number | undefined
  /**
   * @description The total distance covered by the considered activities.
   * @type number | undefined, float
   */
  distance?: number | undefined
  /**
   * @description The total moving time of the considered activities.
   * @type integer | undefined
   */
  moving_time?: number | undefined
  /**
   * @description The total elapsed time of the considered activities.
   * @type integer | undefined
   */
  elapsed_time?: number | undefined
  /**
   * @description The total elevation gain of the considered activities.
   * @type number | undefined, float
   */
  elevation_gain?: number | undefined
  /**
   * @description The total number of achievements of the considered activities.
   * @type integer | undefined
   */
  achievement_count?: number | undefined
}

/**
 * @description A set of rolled-up statistics and totals for an athlete
 */
export type ActivityStats = {
  /**
   * @description The longest distance ridden by the athlete.
   * @type number | undefined, double
   */
  biggest_ride_distance?: number | undefined
  /**
   * @description The highest climb ridden by the athlete.
   * @type number | undefined, double
   */
  biggest_climb_elevation_gain?: number | undefined
  /**
   * @description A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
   * @type object | undefined
   */
  recent_ride_totals?: ActivityTotal | undefined
  /**
   * @description A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
   * @type object | undefined
   */
  recent_run_totals?: ActivityTotal | undefined
  /**
   * @description A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
   * @type object | undefined
   */
  recent_swim_totals?: ActivityTotal | undefined
  /**
   * @description A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
   * @type object | undefined
   */
  ytd_ride_totals?: ActivityTotal | undefined
  /**
   * @description A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
   * @type object | undefined
   */
  ytd_run_totals?: ActivityTotal | undefined
  /**
   * @description A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
   * @type object | undefined
   */
  ytd_swim_totals?: ActivityTotal | undefined
  /**
   * @description A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
   * @type object | undefined
   */
  all_ride_totals?: ActivityTotal | undefined
  /**
   * @description A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
   * @type object | undefined
   */
  all_run_totals?: ActivityTotal | undefined
  /**
   * @description A roll-up of metrics pertaining to a set of activities. Values are in seconds and meters.
   * @type object | undefined
   */
  all_swim_totals?: ActivityTotal | undefined
}

export type MetaAthlete = {
  /**
   * @description The unique identifier of the athlete
   * @type integer | undefined, int64
   */
  id?: number | undefined
}

export const summaryAthleteSexEnum = {
  M: 'M',
  F: 'F',
} as const

export type SummaryAthleteSexEnum = (typeof summaryAthleteSexEnum)[keyof typeof summaryAthleteSexEnum]

export type SummaryAthlete = MetaAthlete & {
  /**
   * @description Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
   * @type integer | undefined
   */
  resource_state?: number | undefined
  /**
   * @description The athlete\'s first name.
   * @type string | undefined
   */
  firstname?: string | undefined
  /**
   * @description The athlete\'s last name.
   * @type string | undefined
   */
  lastname?: string | undefined
  /**
   * @description URL to a 62x62 pixel profile picture.
   * @type string | undefined
   */
  profile_medium?: string | undefined
  /**
   * @description URL to a 124x124 pixel profile picture.
   * @type string | undefined
   */
  profile?: string | undefined
  /**
   * @description The athlete\'s city.
   * @type string | undefined
   */
  city?: string | undefined
  /**
   * @description The athlete\'s state or geographical region.
   * @type string | undefined
   */
  state?: string | undefined
  /**
   * @description The athlete\'s country.
   * @type string | undefined
   */
  country?: string | undefined
  /**
   * @description The athlete\'s sex.
   * @type string | undefined
   */
  sex?: SummaryAthleteSexEnum | undefined
  /**
   * @description Deprecated.  Use summit field instead. Whether the athlete has any Summit subscription.
   * @type boolean | undefined
   */
  premium?: boolean | undefined
  /**
   * @description Whether the athlete has any Summit subscription.
   * @type boolean | undefined
   */
  summit?: boolean | undefined
  /**
   * @description The time at which the athlete was created.
   * @type string | undefined, date-time
   */
  created_at?: string | undefined
  /**
   * @description The time at which the athlete was last updated.
   * @type string | undefined, date-time
   */
  updated_at?: string | undefined
}

export type MetaClub = {
  /**
   * @description The club\'s unique identifier.
   * @type integer | undefined, int64
   */
  id?: number | undefined
  /**
   * @description Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
   * @type integer | undefined
   */
  resource_state?: number | undefined
  /**
   * @description The club\'s name.
   * @type string | undefined
   */
  name?: string | undefined
}

export const activityTypeEnum = {
  AlpineSki: 'AlpineSki',
  BackcountrySki: 'BackcountrySki',
  Canoeing: 'Canoeing',
  Crossfit: 'Crossfit',
  EBikeRide: 'EBikeRide',
  Elliptical: 'Elliptical',
  Golf: 'Golf',
  Handcycle: 'Handcycle',
  Hike: 'Hike',
  IceSkate: 'IceSkate',
  InlineSkate: 'InlineSkate',
  Kayaking: 'Kayaking',
  Kitesurf: 'Kitesurf',
  NordicSki: 'NordicSki',
  Ride: 'Ride',
  RockClimbing: 'RockClimbing',
  RollerSki: 'RollerSki',
  Rowing: 'Rowing',
  Run: 'Run',
  Sail: 'Sail',
  Skateboard: 'Skateboard',
  Snowboard: 'Snowboard',
  Snowshoe: 'Snowshoe',
  Soccer: 'Soccer',
  StairStepper: 'StairStepper',
  StandUpPaddling: 'StandUpPaddling',
  Surfing: 'Surfing',
  Swim: 'Swim',
  Velomobile: 'Velomobile',
  VirtualRide: 'VirtualRide',
  VirtualRun: 'VirtualRun',
  Walk: 'Walk',
  WeightTraining: 'WeightTraining',
  Wheelchair: 'Wheelchair',
  Windsurf: 'Windsurf',
  Workout: 'Workout',
  Yoga: 'Yoga',
} as const

export type ActivityTypeEnum = (typeof activityTypeEnum)[keyof typeof activityTypeEnum]

/**
 * @description An enumeration of the types an activity may have. Note that this enumeration does not include new sport types (e.g. MountainBikeRide, EMountainBikeRide), activities with these sport types will have the corresponding activity type (e.g. Ride for MountainBikeRide, EBikeRide for EMountainBikeRide)
 */
export type ActivityType = ActivityTypeEnum

export const summaryClubSportTypeEnum = {
  cycling: 'cycling',
  running: 'running',
  triathlon: 'triathlon',
  other: 'other',
} as const

export type SummaryClubSportTypeEnum = (typeof summaryClubSportTypeEnum)[keyof typeof summaryClubSportTypeEnum]

export type SummaryClub = MetaClub & {
  /**
   * @description URL to a 60x60 pixel profile picture.
   * @type string | undefined
   */
  profile_medium?: string | undefined
  /**
   * @description URL to a ~1185x580 pixel cover photo.
   * @type string | undefined
   */
  cover_photo?: string | undefined
  /**
   * @description URL to a ~360x176  pixel cover photo.
   * @type string | undefined
   */
  cover_photo_small?: string | undefined
  /**
   * @description Deprecated. Prefer to use activity_types.
   * @type string | undefined
   */
  sport_type?: SummaryClubSportTypeEnum | undefined
  /**
   * @description The activity types that count for a club. This takes precedence over sport_type.
   * @type array | undefined
   */
  activity_types?: ActivityType[] | undefined
  /**
   * @description The club\'s city.
   * @type string | undefined
   */
  city?: string | undefined
  /**
   * @description The club\'s state or geographical region.
   * @type string | undefined
   */
  state?: string | undefined
  /**
   * @description The club\'s country.
   * @type string | undefined
   */
  country?: string | undefined
  /**
   * @description Whether the club is private.
   * @type boolean | undefined
   */
  private?: boolean | undefined
  /**
   * @description The club\'s member count.
   * @type integer | undefined
   */
  member_count?: number | undefined
  /**
   * @description Whether the club is featured or not.
   * @type boolean | undefined
   */
  featured?: boolean | undefined
  /**
   * @description Whether the club is verified or not.
   * @type boolean | undefined
   */
  verified?: boolean | undefined
  /**
   * @description The club\'s vanity URL.
   * @type string | undefined
   */
  url?: string | undefined
}

export type SummaryGear = {
  /**
   * @description The gear\'s unique identifier.
   * @type string | undefined
   */
  id?: string | undefined
  /**
   * @description Resource state, indicates level of detail. Possible values: 2 -> \"summary\", 3 -> \"detail\"
   * @type integer | undefined
   */
  resource_state?: number | undefined
  /**
   * @description Whether this gear\'s is the owner\'s default one.
   * @type boolean | undefined
   */
  primary?: boolean | undefined
  /**
   * @description The gear\'s name.
   * @type string | undefined
   */
  name?: string | undefined
  /**
   * @description The distance logged with this gear.
   * @type number | undefined, float
   */
  distance?: number | undefined
}

export const detailedAthleteMeasurementPreferenceEnum = {
  feet: 'feet',
  meters: 'meters',
} as const

export type DetailedAthleteMeasurementPreferenceEnum = (typeof detailedAthleteMeasurementPreferenceEnum)[keyof typeof detailedAthleteMeasurementPreferenceEnum]

export type DetailedAthlete = SummaryAthlete & {
  /**
   * @description The athlete\'s follower count.
   * @type integer | undefined
   */
  follower_count?: number | undefined
  /**
   * @description The athlete\'s friend count.
   * @type integer | undefined
   */
  friend_count?: number | undefined
  /**
   * @description The athlete\'s preferred unit system.
   * @type string | undefined
   */
  measurement_preference?: DetailedAthleteMeasurementPreferenceEnum | undefined
  /**
   * @description The athlete\'s FTP (Functional Threshold Power).
   * @type integer | undefined
   */
  ftp?: number | undefined
  /**
   * @description The athlete\'s weight.
   * @type number | undefined, float
   */
  weight?: number | undefined
  /**
   * @description The athlete\'s clubs.
   * @type array | undefined
   */
  clubs?: SummaryClub[] | undefined
  /**
   * @description The athlete\'s bikes.
   * @type array | undefined
   */
  bikes?: SummaryGear[] | undefined
  /**
   * @description The athlete\'s shoes.
   * @type array | undefined
   */
  shoes?: SummaryGear[] | undefined
}

export type ZoneRange = {
  /**
   * @description The minimum value in the range.
   * @type integer | undefined
   */
  min?: number | undefined
  /**
   * @description The maximum value in the range.
   * @type integer | undefined
   */
  max?: number | undefined
}

export type ZoneRanges = ZoneRange[]

export type HeartRateZoneRanges = {
  /**
   * @description Whether the athlete has set their own custom heart rate zones
   * @type boolean | undefined
   */
  custom_zones?: boolean | undefined
  /**
   * @type array | undefined
   */
  zones?: ZoneRanges | undefined
}

export type PowerZoneRanges = {
  /**
   * @type array | undefined
   */
  zones?: ZoneRanges | undefined
}

export type Zones = {
  /**
   * @type object | undefined
   */
  heart_rate?: HeartRateZoneRanges | undefined
  /**
   * @type object | undefined
   */
  power?: PowerZoneRanges | undefined
}

/**
 * @description A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
 */
export type LatLng = number[]

export type SummaryPRSegmentEffort = {
  /**
   * @description The unique identifier of the activity related to the PR effort.
   * @type integer | undefined, int64
   */
  pr_activity_id?: number | undefined
  /**
   * @description The elapsed time ot the PR effort.
   * @type integer | undefined
   */
  pr_elapsed_time?: number | undefined
  /**
   * @description The time at which the PR effort was started.
   * @type string | undefined, date-time
   */
  pr_date?: string | undefined
  /**
   * @description Number of efforts by the authenticated athlete on this segment.
   * @type integer | undefined
   */
  effort_count?: number | undefined
}

export type SummarySegmentEffort = {
  /**
   * @description The unique identifier of this effort
   * @type integer | undefined, int64
   */
  id?: number | undefined
  /**
   * @description The unique identifier of the activity related to this effort
   * @type integer | undefined, int64
   */
  activity_id?: number | undefined
  /**
   * @description The effort\'s elapsed time
   * @type integer | undefined
   */
  elapsed_time?: number | undefined
  /**
   * @description The time at which the effort was started.
   * @type string | undefined, date-time
   */
  start_date?: string | undefined
  /**
   * @description The time at which the effort was started in the local timezone.
   * @type string | undefined, date-time
   */
  start_date_local?: string | undefined
  /**
   * @description The effort\'s distance in meters
   * @type number | undefined, float
   */
  distance?: number | undefined
  /**
   * @description Whether this effort is the current best on the leaderboard
   * @type boolean | undefined
   */
  is_kom?: boolean | undefined
}

export const summarySegmentActivityTypeEnum = {
  Ride: 'Ride',
  Run: 'Run',
} as const

export type SummarySegmentActivityTypeEnum = (typeof summarySegmentActivityTypeEnum)[keyof typeof summarySegmentActivityTypeEnum]

export type SummarySegment = {
  /**
   * @description The unique identifier of this segment
   * @type integer | undefined, int64
   */
  id?: number | undefined
  /**
   * @description The name of this segment
   * @type string | undefined
   */
  name?: string | undefined
  /**
   * @type string | undefined
   */
  activity_type?: SummarySegmentActivityTypeEnum | undefined
  /**
   * @description The segment\'s distance, in meters
   * @type number | undefined, float
   */
  distance?: number | undefined
  /**
   * @description The segment\'s average grade, in percents
   * @type number | undefined, float
   */
  average_grade?: number | undefined
  /**
   * @description The segments\'s maximum grade, in percents
   * @type number | undefined, float
   */
  maximum_grade?: number | undefined
  /**
   * @description The segments\'s highest elevation, in meters
   * @type number | undefined, float
   */
  elevation_high?: number | undefined
  /**
   * @description The segments\'s lowest elevation, in meters
   * @type number | undefined, float
   */
  elevation_low?: number | undefined
  /**
   * @description A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type array | undefined
   */
  start_latlng?: LatLng | undefined
  /**
   * @description A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type array | undefined
   */
  end_latlng?: LatLng | undefined
  /**
   * @description The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category.
   * @type integer | undefined
   */
  climb_category?: number | undefined
  /**
   * @description The segments\'s city.
   * @type string | undefined
   */
  city?: string | undefined
  /**
   * @description The segments\'s state or geographical region.
   * @type string | undefined
   */
  state?: string | undefined
  /**
   * @description The segment\'s country.
   * @type string | undefined
   */
  country?: string | undefined
  /**
   * @description Whether this segment is private.
   * @type boolean | undefined
   */
  private?: boolean | undefined
  /**
   * @type object | undefined
   */
  athlete_pr_effort?: SummaryPRSegmentEffort | undefined
  /**
   * @type object | undefined
   */
  athlete_segment_stats?: SummarySegmentEffort | undefined
}

export type PolylineMap = {
  /**
   * @description The identifier of the map
   * @type string | undefined
   */
  id?: string | undefined
  /**
   * @description The polyline of the map, only returned on detailed representation of an object
   * @type string | undefined
   */
  polyline?: string | undefined
  /**
   * @description The summary polyline of the map
   * @type string | undefined
   */
  summary_polyline?: string | undefined
}

export type DetailedSegment = SummarySegment & {
  /**
   * @description The time at which the segment was created.
   * @type string | undefined, date-time
   */
  created_at?: string | undefined
  /**
   * @description The time at which the segment was last updated.
   * @type string | undefined, date-time
   */
  updated_at?: string | undefined
  /**
   * @description The segment\'s total elevation gain.
   * @type number | undefined, float
   */
  total_elevation_gain?: number | undefined
  /**
   * @type object | undefined
   */
  map?: PolylineMap | undefined
  /**
   * @description The total number of efforts for this segment
   * @type integer | undefined
   */
  effort_count?: number | undefined
  /**
   * @description The number of unique athletes who have an effort for this segment
   * @type integer | undefined
   */
  athlete_count?: number | undefined
  /**
   * @description Whether this segment is considered hazardous
   * @type boolean | undefined
   */
  hazardous?: boolean | undefined
  /**
   * @description The number of stars for this segment
   * @type integer | undefined
   */
  star_count?: number | undefined
}

export type MetaActivity = {
  /**
   * @description The unique identifier of the activity
   * @type integer | undefined, int64
   */
  id?: number | undefined
}

export type DetailedSegmentEffort = SummarySegmentEffort & {
  /**
   * @description The name of the segment on which this effort was performed
   * @type string | undefined
   */
  name?: string | undefined
  /**
   * @type object | undefined
   */
  activity?: MetaActivity | undefined
  /**
   * @type object | undefined
   */
  athlete?: MetaAthlete | undefined
  /**
   * @description The effort\'s moving time
   * @type integer | undefined
   */
  moving_time?: number | undefined
  /**
   * @description The start index of this effort in its activity\'s stream
   * @type integer | undefined
   */
  start_index?: number | undefined
  /**
   * @description The end index of this effort in its activity\'s stream
   * @type integer | undefined
   */
  end_index?: number | undefined
  /**
   * @description The effort\'s average cadence
   * @type number | undefined, float
   */
  average_cadence?: number | undefined
  /**
   * @description The average wattage of this effort
   * @type number | undefined, float
   */
  average_watts?: number | undefined
  /**
   * @description For riding efforts, whether the wattage was reported by a dedicated recording device
   * @type boolean | undefined
   */
  device_watts?: boolean | undefined
  /**
   * @description The heart heart rate of the athlete during this effort
   * @type number | undefined, float
   */
  average_heartrate?: number | undefined
  /**
   * @description The maximum heart rate of the athlete during this effort
   * @type number | undefined, float
   */
  max_heartrate?: number | undefined
  /**
   * @type object | undefined
   */
  segment?: SummarySegment | undefined
  /**
   * @description The rank of the effort on the global leaderboard if it belongs in the top 10 at the time of upload
   * @minLength 1
   * @maxLength 10
   * @type integer | undefined
   */
  kom_rank?: number | undefined
  /**
   * @description The rank of the effort on the athlete\'s leaderboard if it belongs in the top 3 at the time of upload
   * @minLength 1
   * @maxLength 3
   * @type integer | undefined
   */
  pr_rank?: number | undefined
  /**
   * @description Whether this effort should be hidden when viewed within an activity
   * @type boolean | undefined
   */
  hidden?: boolean | undefined
}

export const explorerSegmentClimbCategoryDescEnum = {
  NC: 'NC',
  '4': '4',
  '3': '3',
  '2': '2',
  '1': '1',
  HC: 'HC',
} as const

export type ExplorerSegmentClimbCategoryDescEnum = (typeof explorerSegmentClimbCategoryDescEnum)[keyof typeof explorerSegmentClimbCategoryDescEnum]

export type ExplorerSegment = {
  /**
   * @description The unique identifier of this segment
   * @type integer | undefined, int64
   */
  id?: number | undefined
  /**
   * @description The name of this segment
   * @type string | undefined
   */
  name?: string | undefined
  /**
   * @description The category of the climb [0, 5]. Higher is harder ie. 5 is Hors catégorie, 0 is uncategorized in climb_category. If climb_category = 5, climb_category_desc = HC. If climb_category = 2, climb_category_desc = 3.
   * @minLength 0
   * @maxLength 5
   * @type integer | undefined
   */
  climb_category?: number | undefined
  /**
   * @description The description for the category of the climb
   * @type string | undefined
   */
  climb_category_desc?: ExplorerSegmentClimbCategoryDescEnum | undefined
  /**
   * @description The segment\'s average grade, in percents
   * @type number | undefined, float
   */
  avg_grade?: number | undefined
  /**
   * @description A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type array | undefined
   */
  start_latlng?: LatLng | undefined
  /**
   * @description A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type array | undefined
   */
  end_latlng?: LatLng | undefined
  /**
   * @description The segments\'s evelation difference, in meters
   * @type number | undefined, float
   */
  elev_difference?: number | undefined
  /**
   * @description The segment\'s distance, in meters
   * @type number | undefined, float
   */
  distance?: number | undefined
  /**
   * @description The polyline of the segment
   * @type string | undefined
   */
  points?: string | undefined
}

export type ExplorerResponse = {
  /**
   * @description The set of segments matching an explorer request
   * @type array | undefined
   */
  segments?: ExplorerSegment[] | undefined
}

export const sportTypeEnum = {
  AlpineSki: 'AlpineSki',
  BackcountrySki: 'BackcountrySki',
  Badminton: 'Badminton',
  Canoeing: 'Canoeing',
  Crossfit: 'Crossfit',
  EBikeRide: 'EBikeRide',
  Elliptical: 'Elliptical',
  EMountainBikeRide: 'EMountainBikeRide',
  Golf: 'Golf',
  GravelRide: 'GravelRide',
  Handcycle: 'Handcycle',
  HighIntensityIntervalTraining: 'HighIntensityIntervalTraining',
  Hike: 'Hike',
  IceSkate: 'IceSkate',
  InlineSkate: 'InlineSkate',
  Kayaking: 'Kayaking',
  Kitesurf: 'Kitesurf',
  MountainBikeRide: 'MountainBikeRide',
  NordicSki: 'NordicSki',
  Pickleball: 'Pickleball',
  Pilates: 'Pilates',
  Racquetball: 'Racquetball',
  Ride: 'Ride',
  RockClimbing: 'RockClimbing',
  RollerSki: 'RollerSki',
  Rowing: 'Rowing',
  Run: 'Run',
  Sail: 'Sail',
  Skateboard: 'Skateboard',
  Snowboard: 'Snowboard',
  Snowshoe: 'Snowshoe',
  Soccer: 'Soccer',
  Squash: 'Squash',
  StairStepper: 'StairStepper',
  StandUpPaddling: 'StandUpPaddling',
  Surfing: 'Surfing',
  Swim: 'Swim',
  TableTennis: 'TableTennis',
  Tennis: 'Tennis',
  TrailRun: 'TrailRun',
  Velomobile: 'Velomobile',
  VirtualRide: 'VirtualRide',
  VirtualRow: 'VirtualRow',
  VirtualRun: 'VirtualRun',
  Walk: 'Walk',
  WeightTraining: 'WeightTraining',
  Wheelchair: 'Wheelchair',
  Windsurf: 'Windsurf',
  Workout: 'Workout',
  Yoga: 'Yoga',
} as const

export type SportTypeEnum = (typeof sportTypeEnum)[keyof typeof sportTypeEnum]

/**
 * @description An enumeration of the sport types an activity may have. Distinct from ActivityType in that it has new types (e.g. MountainBikeRide)
 */
export type SportType = SportTypeEnum

export type SummaryActivity = MetaActivity & {
  /**
   * @description The identifier provided at upload time
   * @type string | undefined
   */
  external_id?: string | undefined
  /**
   * @description The identifier of the upload that resulted in this activity
   * @type integer | undefined, int64
   */
  upload_id?: number | undefined
  /**
   * @type object | undefined
   */
  athlete?: MetaAthlete | undefined
  /**
   * @description The name of the activity
   * @type string | undefined
   */
  name?: string | undefined
  /**
   * @description The activity\'s distance, in meters
   * @type number | undefined, float
   */
  distance?: number | undefined
  /**
   * @description The activity\'s moving time, in seconds
   * @type integer | undefined
   */
  moving_time?: number | undefined
  /**
   * @description The activity\'s elapsed time, in seconds
   * @type integer | undefined
   */
  elapsed_time?: number | undefined
  /**
   * @description The activity\'s total elevation gain.
   * @type number | undefined, float
   */
  total_elevation_gain?: number | undefined
  /**
   * @description The activity\'s highest elevation, in meters
   * @type number | undefined, float
   */
  elev_high?: number | undefined
  /**
   * @description The activity\'s lowest elevation, in meters
   * @type number | undefined, float
   */
  elev_low?: number | undefined
  /**
   * @description An enumeration of the types an activity may have. Note that this enumeration does not include new sport types (e.g. MountainBikeRide, EMountainBikeRide), activities with these sport types will have the corresponding activity type (e.g. Ride for MountainBikeRide, EBikeRide for EMountainBikeRide)
   * @type string | undefined
   */
  type?: ActivityType | undefined
  /**
   * @description An enumeration of the sport types an activity may have. Distinct from ActivityType in that it has new types (e.g. MountainBikeRide)
   * @type string | undefined
   */
  sport_type?: SportType | undefined
  /**
   * @description The time at which the activity was started.
   * @type string | undefined, date-time
   */
  start_date?: string | undefined
  /**
   * @description The time at which the activity was started in the local timezone.
   * @type string | undefined, date-time
   */
  start_date_local?: string | undefined
  /**
   * @description The timezone of the activity
   * @type string | undefined
   */
  timezone?: string | undefined
  /**
   * @description A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type array | undefined
   */
  start_latlng?: LatLng | undefined
  /**
   * @description A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type array | undefined
   */
  end_latlng?: LatLng | undefined
  /**
   * @description The number of achievements gained during this activity
   * @type integer | undefined
   */
  achievement_count?: number | undefined
  /**
   * @description The number of kudos given for this activity
   * @type integer | undefined
   */
  kudos_count?: number | undefined
  /**
   * @description The number of comments for this activity
   * @type integer | undefined
   */
  comment_count?: number | undefined
  /**
   * @description The number of athletes for taking part in a group activity
   * @minLength 1
   * @type integer | undefined
   */
  athlete_count?: number | undefined
  /**
   * @description The number of Instagram photos for this activity
   * @type integer | undefined
   */
  photo_count?: number | undefined
  /**
   * @description The number of Instagram and Strava photos for this activity
   * @type integer | undefined
   */
  total_photo_count?: number | undefined
  /**
   * @type object | undefined
   */
  map?: PolylineMap | undefined
  /**
   * @description Whether this activity was recorded on a training machine
   * @type boolean | undefined
   */
  trainer?: boolean | undefined
  /**
   * @description Whether this activity is a commute
   * @type boolean | undefined
   */
  commute?: boolean | undefined
  /**
   * @description Whether this activity was created manually
   * @type boolean | undefined
   */
  manual?: boolean | undefined
  /**
   * @description Whether this activity is private
   * @type boolean | undefined
   */
  private?: boolean | undefined
  /**
   * @description Whether this activity is flagged
   * @type boolean | undefined
   */
  flagged?: boolean | undefined
  /**
   * @description The activity\'s workout type
   * @type integer | undefined
   */
  workout_type?: number | undefined
  /**
   * @description The unique identifier of the upload in string format
   * @type string | undefined
   */
  upload_id_str?: string | undefined
  /**
   * @description The activity\'s average speed, in meters per second
   * @type number | undefined, float
   */
  average_speed?: number | undefined
  /**
   * @description The activity\'s max speed, in meters per second
   * @type number | undefined, float
   */
  max_speed?: number | undefined
  /**
   * @description Whether the logged-in athlete has kudoed this activity
   * @type boolean | undefined
   */
  has_kudoed?: boolean | undefined
  /**
   * @description Whether the activity is muted
   * @type boolean | undefined
   */
  hide_from_home?: boolean | undefined
  /**
   * @description The id of the gear for the activity
   * @type string | undefined
   */
  gear_id?: string | undefined
  /**
   * @description The total work done in kilojoules during this activity. Rides only
   * @type number | undefined, float
   */
  kilojoules?: number | undefined
  /**
   * @description Average power output in watts during this activity. Rides only
   * @type number | undefined, float
   */
  average_watts?: number | undefined
  /**
   * @description Whether the watts are from a power meter, false if estimated
   * @type boolean | undefined
   */
  device_watts?: boolean | undefined
  /**
   * @description Rides with power meter data only
   * @type integer | undefined
   */
  max_watts?: number | undefined
  /**
   * @description Similar to Normalized Power. Rides with power meter data only
   * @type integer | undefined
   */
  weighted_average_watts?: number | undefined
}

export type PhotosSummary = {
  /**
   * @description The number of photos
   * @type integer | undefined
   */
  count?: number | undefined
  /**
   * @type object | undefined
   */
  primary?:
    | {
        /**
         * @type integer | undefined, int64
         */
        id?: number | undefined
        /**
         * @type integer | undefined
         */
        source?: number | undefined
        /**
         * @type string | undefined
         */
        unique_id?: string | undefined
        /**
         * @type object | undefined
         */
        urls?:
          | {
              [key: string]: string
            }
          | undefined
      }
    | undefined
}

export type Split = {
  /**
   * @description The average speed of this split, in meters per second
   * @type number | undefined, float
   */
  average_speed?: number | undefined
  /**
   * @description The distance of this split, in meters
   * @type number | undefined, float
   */
  distance?: number | undefined
  /**
   * @description The elapsed time of this split, in seconds
   * @type integer | undefined
   */
  elapsed_time?: number | undefined
  /**
   * @description The elevation difference of this split, in meters
   * @type number | undefined, float
   */
  elevation_difference?: number | undefined
  /**
   * @description The pacing zone of this split
   * @type integer | undefined
   */
  pace_zone?: number | undefined
  /**
   * @description The moving time of this split, in seconds
   * @type integer | undefined
   */
  moving_time?: number | undefined
  /**
   * @description N/A
   * @type integer | undefined
   */
  split?: number | undefined
}

export type Lap = {
  /**
   * @description The unique identifier of this lap
   * @type integer | undefined, int64
   */
  id?: number | undefined
  /**
   * @type object | undefined
   */
  activity?: MetaActivity | undefined
  /**
   * @type object | undefined
   */
  athlete?: MetaAthlete | undefined
  /**
   * @description The lap\'s average cadence
   * @type number | undefined, float
   */
  average_cadence?: number | undefined
  /**
   * @description The lap\'s average speed
   * @type number | undefined, float
   */
  average_speed?: number | undefined
  /**
   * @description The lap\'s distance, in meters
   * @type number | undefined, float
   */
  distance?: number | undefined
  /**
   * @description The lap\'s elapsed time, in seconds
   * @type integer | undefined
   */
  elapsed_time?: number | undefined
  /**
   * @description The start index of this effort in its activity\'s stream
   * @type integer | undefined
   */
  start_index?: number | undefined
  /**
   * @description The end index of this effort in its activity\'s stream
   * @type integer | undefined
   */
  end_index?: number | undefined
  /**
   * @description The index of this lap in the activity it belongs to
   * @type integer | undefined
   */
  lap_index?: number | undefined
  /**
   * @description The maximum speed of this lat, in meters per second
   * @type number | undefined, float
   */
  max_speed?: number | undefined
  /**
   * @description The lap\'s moving time, in seconds
   * @type integer | undefined
   */
  moving_time?: number | undefined
  /**
   * @description The name of the lap
   * @type string | undefined
   */
  name?: string | undefined
  /**
   * @description The athlete\'s pace zone during this lap
   * @type integer | undefined
   */
  pace_zone?: number | undefined
  /**
   * @type integer | undefined
   */
  split?: number | undefined
  /**
   * @description The time at which the lap was started.
   * @type string | undefined, date-time
   */
  start_date?: string | undefined
  /**
   * @description The time at which the lap was started in the local timezone.
   * @type string | undefined, date-time
   */
  start_date_local?: string | undefined
  /**
   * @description The elevation gain of this lap, in meters
   * @type number | undefined, float
   */
  total_elevation_gain?: number | undefined
}

export type DetailedActivity = SummaryActivity & {
  /**
   * @description The description of the activity
   * @type string | undefined
   */
  description?: string | undefined
  /**
   * @type object | undefined
   */
  photos?: PhotosSummary | undefined
  /**
   * @type object | undefined
   */
  gear?: SummaryGear | undefined
  /**
   * @description The number of kilocalories consumed during this activity
   * @type number | undefined, float
   */
  calories?: number | undefined
  /**
   * @type array | undefined
   */
  segment_efforts?: DetailedSegmentEffort[] | undefined
  /**
   * @description The name of the device used to record the activity
   * @type string | undefined
   */
  device_name?: string | undefined
  /**
   * @description The token used to embed a Strava activity
   * @type string | undefined
   */
  embed_token?: string | undefined
  /**
   * @description The splits of this activity in metric units (for runs)
   * @type array | undefined
   */
  splits_metric?: Split[] | undefined
  /**
   * @description The splits of this activity in imperial units (for runs)
   * @type array | undefined
   */
  splits_standard?: Split[] | undefined
  /**
   * @type array | undefined
   */
  laps?: Lap[] | undefined
  /**
   * @type array | undefined
   */
  best_efforts?: DetailedSegmentEffort[] | undefined
}

export type UpdatableActivity = {
  /**
   * @description Whether this activity is a commute
   * @type boolean | undefined
   */
  commute?: boolean | undefined
  /**
   * @description Whether this activity was recorded on a training machine
   * @type boolean | undefined
   */
  trainer?: boolean | undefined
  /**
   * @description Whether this activity is muted
   * @type boolean | undefined
   */
  hide_from_home?: boolean | undefined
  /**
   * @description The description of the activity
   * @type string | undefined
   */
  description?: string | undefined
  /**
   * @description The name of the activity
   * @type string | undefined
   */
  name?: string | undefined
  /**
   * @description An enumeration of the types an activity may have. Note that this enumeration does not include new sport types (e.g. MountainBikeRide, EMountainBikeRide), activities with these sport types will have the corresponding activity type (e.g. Ride for MountainBikeRide, EBikeRide for EMountainBikeRide)
   * @type string | undefined
   */
  type?: ActivityType | undefined
  /**
   * @description An enumeration of the sport types an activity may have. Distinct from ActivityType in that it has new types (e.g. MountainBikeRide)
   * @type string | undefined
   */
  sport_type?: SportType | undefined
  /**
   * @description Identifier for the gear associated with the activity. ‘none’ clears gear from activity
   * @type string | undefined
   */
  gear_id?: string | undefined
}

/**
 * @description A union type representing the time spent in a given zone.
 */
export type TimedZoneRange = ZoneRange & {
  /**
   * @description The number of seconds spent in this zone
   * @type integer | undefined
   */
  time?: number | undefined
}

/**
 * @description Stores the exclusive ranges representing zones and the time spent in each.
 */
export type TimedZoneDistribution = TimedZoneRange[]

export const activityZoneTypeEnum = {
  heartrate: 'heartrate',
  power: 'power',
} as const

export type ActivityZoneTypeEnum = (typeof activityZoneTypeEnum)[keyof typeof activityZoneTypeEnum]

export type ActivityZone = {
  /**
   * @type integer | undefined
   */
  score?: number | undefined
  /**
   * @description Stores the exclusive ranges representing zones and the time spent in each.
   * @type array | undefined
   */
  distribution_buckets?: TimedZoneDistribution | undefined
  /**
   * @type string | undefined
   */
  type?: ActivityZoneTypeEnum | undefined
  /**
   * @type boolean | undefined
   */
  sensor_based?: boolean | undefined
  /**
   * @type integer | undefined
   */
  points?: number | undefined
  /**
   * @type boolean | undefined
   */
  custom_zones?: boolean | undefined
  /**
   * @type integer | undefined
   */
  max?: number | undefined
}

export type Comment = {
  /**
   * @description The unique identifier of this comment
   * @type integer | undefined, int64
   */
  id?: number | undefined
  /**
   * @description The identifier of the activity this comment is related to
   * @type integer | undefined, int64
   */
  activity_id?: number | undefined
  /**
   * @description The content of the comment
   * @type string | undefined
   */
  text?: string | undefined
  athlete?: SummaryAthlete | undefined
  /**
   * @description The time at which this comment was created.
   * @type string | undefined, date-time
   */
  created_at?: string | undefined
}

export const detailedClubMembershipEnum = {
  member: 'member',
  pending: 'pending',
} as const

export type DetailedClubMembershipEnum = (typeof detailedClubMembershipEnum)[keyof typeof detailedClubMembershipEnum]

export type DetailedClub = SummaryClub & {
  /**
   * @description The membership status of the logged-in athlete.
   * @type string | undefined
   */
  membership?: DetailedClubMembershipEnum | undefined
  /**
   * @description Whether the currently logged-in athlete is an administrator of this club.
   * @type boolean | undefined
   */
  admin?: boolean | undefined
  /**
   * @description Whether the currently logged-in athlete is the owner of this club.
   * @type boolean | undefined
   */
  owner?: boolean | undefined
  /**
   * @description The number of athletes in the club that the logged-in athlete follows.
   * @type integer | undefined
   */
  following_count?: number | undefined
}

export type ClubAthlete = {
  /**
   * @description Resource state, indicates level of detail. Possible values: 1 -> \"meta\", 2 -> \"summary\", 3 -> \"detail\"
   * @type integer | undefined
   */
  resource_state?: number | undefined
  /**
   * @description The athlete\'s first name.
   * @type string | undefined
   */
  firstname?: string | undefined
  /**
   * @description The athlete\'s last initial.
   * @type string | undefined
   */
  lastname?: string | undefined
  /**
   * @description The athlete\'s member status.
   * @type string | undefined
   */
  member?: string | undefined
  /**
   * @description Whether the athlete is a club admin.
   * @type boolean | undefined
   */
  admin?: boolean | undefined
  /**
   * @description Whether the athlete is club owner.
   * @type boolean | undefined
   */
  owner?: boolean | undefined
}

export type ClubActivity = {
  /**
   * @type object | undefined
   */
  athlete?: MetaAthlete | undefined
  /**
   * @description The name of the activity
   * @type string | undefined
   */
  name?: string | undefined
  /**
   * @description The activity\'s distance, in meters
   * @type number | undefined, float
   */
  distance?: number | undefined
  /**
   * @description The activity\'s moving time, in seconds
   * @type integer | undefined
   */
  moving_time?: number | undefined
  /**
   * @description The activity\'s elapsed time, in seconds
   * @type integer | undefined
   */
  elapsed_time?: number | undefined
  /**
   * @description The activity\'s total elevation gain.
   * @type number | undefined, float
   */
  total_elevation_gain?: number | undefined
  /**
   * @description An enumeration of the types an activity may have. Note that this enumeration does not include new sport types (e.g. MountainBikeRide, EMountainBikeRide), activities with these sport types will have the corresponding activity type (e.g. Ride for MountainBikeRide, EBikeRide for EMountainBikeRide)
   * @type string | undefined
   */
  type?: ActivityType | undefined
  /**
   * @description An enumeration of the sport types an activity may have. Distinct from ActivityType in that it has new types (e.g. MountainBikeRide)
   * @type string | undefined
   */
  sport_type?: SportType | undefined
  /**
   * @description The activity\'s workout type
   * @type integer | undefined
   */
  workout_type?: number | undefined
}

export type DetailedGear = SummaryGear & {
  /**
   * @description The gear\'s brand name.
   * @type string | undefined
   */
  brand_name?: string | undefined
  /**
   * @description The gear\'s model name.
   * @type string | undefined
   */
  model_name?: string | undefined
  /**
   * @description The gear\'s frame type (bike only).
   * @type integer | undefined
   */
  frame_type?: number | undefined
  /**
   * @description The gear\'s description.
   * @type string | undefined
   */
  description?: string | undefined
}

export type Waypoint = {
  /**
   * @description A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type array | undefined
   */
  latlng?: LatLng | undefined
  /**
   * @description A pair of latitude/longitude coordinates, represented as an array of 2 floating point numbers.
   * @type array | undefined
   */
  target_latlng?: LatLng | undefined
  /**
   * @description Categories that the waypoint belongs to
   * @type array | undefined
   */
  categories?: string[] | undefined
  /**
   * @description A title for the waypoint
   * @type string | undefined
   */
  title?: string | undefined
  /**
   * @description A description of the waypoint (optional)
   * @type string | undefined
   */
  description?: string | undefined
  /**
   * @description The number meters along the route that the waypoint is located
   * @type integer | undefined
   */
  distance_into_route?: number | undefined
}

export type Route = {
  athlete?: SummaryAthlete | undefined
  /**
   * @description The description of the route
   * @type string | undefined
   */
  description?: string | undefined
  /**
   * @description The route\'s distance, in meters
   * @type number | undefined, float
   */
  distance?: number | undefined
  /**
   * @description The route\'s elevation gain.
   * @type number | undefined, float
   */
  elevation_gain?: number | undefined
  /**
   * @description The unique identifier of this route
   * @type integer | undefined, int64
   */
  id?: number | undefined
  /**
   * @description The unique identifier of the route in string format
   * @type string | undefined
   */
  id_str?: string | undefined
  /**
   * @type object | undefined
   */
  map?: PolylineMap | undefined
  /**
   * @description The name of this route
   * @type string | undefined
   */
  name?: string | undefined
  /**
   * @description Whether this route is private
   * @type boolean | undefined
   */
  private?: boolean | undefined
  /**
   * @description Whether this route is starred by the logged-in athlete
   * @type boolean | undefined
   */
  starred?: boolean | undefined
  /**
   * @description An epoch timestamp of when the route was created
   * @type integer | undefined
   */
  timestamp?: number | undefined
  /**
   * @description This route\'s type (1 for ride, 2 for runs)
   * @type integer | undefined
   */
  type?: number | undefined
  /**
   * @description This route\'s sub-type (1 for road, 2 for mountain bike, 3 for cross, 4 for trail, 5 for mixed)
   * @type integer | undefined
   */
  sub_type?: number | undefined
  /**
   * @description The time at which the route was created
   * @type string | undefined, date-time
   */
  created_at?: string | undefined
  /**
   * @description The time at which the route was last updated
   * @type string | undefined, date-time
   */
  updated_at?: string | undefined
  /**
   * @description Estimated time in seconds for the authenticated athlete to complete route
   * @type integer | undefined
   */
  estimated_moving_time?: number | undefined
  /**
   * @description The segments traversed by this route
   * @type array | undefined
   */
  segments?: SummarySegment[] | undefined
  /**
   * @description The custom waypoints along this route
   * @type array | undefined
   */
  waypoints?: Waypoint[] | undefined
}

export type Upload = {
  /**
   * @description The unique identifier of the upload
   * @type integer | undefined, int64
   */
  id?: number | undefined
  /**
   * @description The unique identifier of the upload in string format
   * @type string | undefined
   */
  id_str?: string | undefined
  /**
   * @description The external identifier of the upload
   * @type string | undefined
   */
  external_id?: string | undefined
  /**
   * @description The error associated with this upload
   * @type string | undefined
   */
  error?: string | undefined
  /**
   * @description The status of this upload
   * @type string | undefined
   */
  status?: string | undefined
  /**
   * @description The identifier of the activity this upload resulted into
   * @type integer | undefined, int64
   */
  activity_id?: number | undefined
}

export const baseStreamResolutionEnum = {
  low: 'low',
  medium: 'medium',
  high: 'high',
} as const

export type BaseStreamResolutionEnum = (typeof baseStreamResolutionEnum)[keyof typeof baseStreamResolutionEnum]

export const baseStreamSeriesTypeEnum = {
  distance: 'distance',
  time: 'time',
} as const

export type BaseStreamSeriesTypeEnum = (typeof baseStreamSeriesTypeEnum)[keyof typeof baseStreamSeriesTypeEnum]

export type BaseStream = {
  /**
   * @description The number of data points in this stream
   * @type integer | undefined
   */
  original_size?: number | undefined
  /**
   * @description The level of detail (sampling) in which this stream was returned
   * @type string | undefined
   */
  resolution?: BaseStreamResolutionEnum | undefined
  /**
   * @description The base series used in the case the stream was downsampled
   * @type string | undefined
   */
  series_type?: BaseStreamSeriesTypeEnum | undefined
}

export type TimeStream = BaseStream & {
  /**
   * @description The sequence of time values for this stream, in seconds
   * @type array | undefined
   */
  data?: number[] | undefined
}

export type DistanceStream = BaseStream & {
  /**
   * @description The sequence of distance values for this stream, in meters
   * @type array | undefined
   */
  data?: number[] | undefined
}

export type LatLngStream = BaseStream & {
  /**
   * @description The sequence of lat/long values for this stream
   * @type array | undefined
   */
  data?: LatLng[] | undefined
}

export type AltitudeStream = BaseStream & {
  /**
   * @description The sequence of altitude values for this stream, in meters
   * @type array | undefined
   */
  data?: number[] | undefined
}

export type SmoothVelocityStream = BaseStream & {
  /**
   * @description The sequence of velocity values for this stream, in meters per second
   * @type array | undefined
   */
  data?: number[] | undefined
}

export type HeartrateStream = BaseStream & {
  /**
   * @description The sequence of heart rate values for this stream, in beats per minute
   * @type array | undefined
   */
  data?: number[] | undefined
}

export type CadenceStream = BaseStream & {
  /**
   * @description The sequence of cadence values for this stream, in rotations per minute
   * @type array | undefined
   */
  data?: number[] | undefined
}

export type PowerStream = BaseStream & {
  /**
   * @description The sequence of power values for this stream, in watts
   * @type array | undefined
   */
  data?: number[] | undefined
}

export type TemperatureStream = BaseStream & {
  /**
   * @description The sequence of temperature values for this stream, in celsius degrees
   * @type array | undefined
   */
  data?: number[] | undefined
}

export type MovingStream = BaseStream & {
  /**
   * @description The sequence of moving values for this stream, as boolean values
   * @type array | undefined
   */
  data?: boolean[] | undefined
}

export type SmoothGradeStream = BaseStream & {
  /**
   * @description The sequence of grade values for this stream, as percents of a grade
   * @type array | undefined
   */
  data?: number[] | undefined
}

export type StreamSet = {
  time?: TimeStream | undefined
  distance?: DistanceStream | undefined
  latlng?: LatLngStream | undefined
  altitude?: AltitudeStream | undefined
  velocity_smooth?: SmoothVelocityStream | undefined
  heartrate?: HeartrateStream | undefined
  cadence?: CadenceStream | undefined
  watts?: PowerStream | undefined
  temp?: TemperatureStream | undefined
  moving?: MovingStream | undefined
  grade_smooth?: SmoothGradeStream | undefined
}

export type GetStatsPathParams = {
  /**
   * @description The identifier of the athlete. Must match the authenticated athlete.
   * @type integer, int64
   */
  id: number
}

/**
 * @description Activity stats of the athlete.
 */
export type GetStats200 = ActivityStats

/**
 * @description Unexpected error.
 */
export type GetStatsError = Fault

export type GetStatsQueryResponse = GetStats200

export type GetStatsQuery = {
  Response: GetStats200
  PathParams: GetStatsPathParams
  Errors: any
}

/**
 * @description Profile information for the authenticated athlete.
 */
export type GetLoggedInAthlete200 = DetailedAthlete

/**
 * @description Unexpected error.
 */
export type GetLoggedInAthleteError = Fault

export type GetLoggedInAthleteQueryResponse = GetLoggedInAthlete200

export type GetLoggedInAthleteQuery = {
  Response: GetLoggedInAthlete200
  Errors: any
}

export type UpdateLoggedInAthletePathParams = {
  /**
   * @description The weight of the athlete in kilograms.
   * @type number, float
   */
  weight: number
}

/**
 * @description Profile information for the authenticated athlete.
 */
export type UpdateLoggedInAthlete200 = DetailedAthlete

/**
 * @description Unexpected error.
 */
export type UpdateLoggedInAthleteError = Fault

export type UpdateLoggedInAthleteMutationResponse = UpdateLoggedInAthlete200

export type UpdateLoggedInAthleteMutation = {
  Response: UpdateLoggedInAthlete200
  PathParams: UpdateLoggedInAthletePathParams
  Errors: any
}

/**
 * @description Heart rate and power zones.
 */
export type GetLoggedInAthleteZones200 = Zones

/**
 * @description Unexpected error.
 */
export type GetLoggedInAthleteZonesError = Fault

export type GetLoggedInAthleteZonesQueryResponse = GetLoggedInAthleteZones200

export type GetLoggedInAthleteZonesQuery = {
  Response: GetLoggedInAthleteZones200
  Errors: any
}

export type GetSegmentByIdPathParams = {
  /**
   * @description The identifier of the segment.
   * @type integer, int64
   */
  id: number
}

/**
 * @description Representation of a segment.
 */
export type GetSegmentById200 = DetailedSegment

/**
 * @description Unexpected error.
 */
export type GetSegmentByIdError = Fault

export type GetSegmentByIdQueryResponse = GetSegmentById200

export type GetSegmentByIdQuery = {
  Response: GetSegmentById200
  PathParams: GetSegmentByIdPathParams
  Errors: any
}

export type GetLoggedInAthleteStarredSegmentsQueryParams = {
  /**
   * @description Page number. Defaults to 1.
   * @type integer | undefined
   */
  page?: number | undefined
  /**
   * @description Number of items per page. Defaults to 30.
   * @default 30
   * @type integer | undefined
   */
  per_page?: number | undefined
}

/**
 * @description List of the authenticated athlete\'s starred segments.
 */
export type GetLoggedInAthleteStarredSegments200 = SummarySegment[]

/**
 * @description Unexpected error.
 */
export type GetLoggedInAthleteStarredSegmentsError = Fault

export type GetLoggedInAthleteStarredSegmentsQueryResponse = GetLoggedInAthleteStarredSegments200

export type GetLoggedInAthleteStarredSegmentsQuery = {
  Response: GetLoggedInAthleteStarredSegments200
  QueryParams: GetLoggedInAthleteStarredSegmentsQueryParams
  Errors: any
}

export type StarSegmentPathParams = {
  /**
   * @description The identifier of the segment to star.
   * @type integer, int64
   */
  id: number
}

/**
 * @description Representation of a segment.
 */
export type StarSegment200 = DetailedSegment

/**
 * @description Unexpected error.
 */
export type StarSegmentError = Fault

export type StarSegmentMutationRequest = {
  /**
   * @description If true, star the segment; if false, unstar the segment.
   * @default false
   * @type boolean
   */
  starred: boolean
}

export type StarSegmentMutationResponse = StarSegment200

export type StarSegmentMutation = {
  Response: StarSegment200
  Request: StarSegmentMutationRequest
  PathParams: StarSegmentPathParams
  Errors: any
}

export type GetEffortsBySegmentIdQueryParams = {
  /**
   * @description The identifier of the segment.
   * @type integer
   */
  segment_id: number
  /**
   * @description ISO 8601 formatted date time.
   * @type string | undefined, date-time
   */
  start_date_local?: string | undefined
  /**
   * @description ISO 8601 formatted date time.
   * @type string | undefined, date-time
   */
  end_date_local?: string | undefined
  /**
   * @description Number of items per page. Defaults to 30.
   * @default 30
   * @type integer | undefined
   */
  per_page?: number | undefined
}

/**
 * @description List of segment efforts.
 */
export type GetEffortsBySegmentId200 = DetailedSegmentEffort[]

/**
 * @description Unexpected error.
 */
export type GetEffortsBySegmentIdError = Fault

export type GetEffortsBySegmentIdQueryResponse = GetEffortsBySegmentId200

export type GetEffortsBySegmentIdQuery = {
  Response: GetEffortsBySegmentId200
  QueryParams: GetEffortsBySegmentIdQueryParams
  Errors: any
}

export const exploreSegmentsQueryParamsActivityTypeEnum = {
  running: 'running',
  riding: 'riding',
} as const

export type ExploreSegmentsQueryParamsActivityTypeEnum =
  (typeof exploreSegmentsQueryParamsActivityTypeEnum)[keyof typeof exploreSegmentsQueryParamsActivityTypeEnum]

export type ExploreSegmentsQueryParams = {
  /**
   * @description The latitude and longitude for two points describing a rectangular boundary for the search: [southwest corner latitutde, southwest corner longitude, northeast corner latitude, northeast corner longitude]
   * @type array
   */
  bounds: number[]
  /**
   * @description Desired activity type.
   * @type string | undefined
   */
  activity_type?: ExploreSegmentsQueryParamsActivityTypeEnum | undefined
  /**
   * @description The minimum climbing category.
   * @minLength 0
   * @maxLength 5
   * @type integer | undefined
   */
  min_cat?: number | undefined
  /**
   * @description The maximum climbing category.
   * @minLength 0
   * @maxLength 5
   * @type integer | undefined
   */
  max_cat?: number | undefined
}

/**
 * @description List of matching segments.
 */
export type ExploreSegments200 = ExplorerResponse

/**
 * @description Unexpected error.
 */
export type ExploreSegmentsError = Fault

export type ExploreSegmentsQueryResponse = ExploreSegments200

export type ExploreSegmentsQuery = {
  Response: ExploreSegments200
  QueryParams: ExploreSegmentsQueryParams
  Errors: any
}

export type GetSegmentEffortByIdPathParams = {
  /**
   * @description The identifier of the segment effort.
   * @type integer, int64
   */
  id: number
}

/**
 * @description Representation of a segment effort.
 */
export type GetSegmentEffortById200 = DetailedSegmentEffort

/**
 * @description Unexpected error.
 */
export type GetSegmentEffortByIdError = Fault

export type GetSegmentEffortByIdQueryResponse = GetSegmentEffortById200

export type GetSegmentEffortByIdQuery = {
  Response: GetSegmentEffortById200
  PathParams: GetSegmentEffortByIdPathParams
  Errors: any
}

/**
 * @description The activity\'s detailed representation.
 */
export type CreateActivity201 = DetailedActivity

/**
 * @description Unexpected error.
 */
export type CreateActivityError = Fault

export type CreateActivityMutationRequest = {
  /**
   * @description The name of the activity.
   * @type string
   */
  name: string
  /**
   * @description Type of activity. For example - Run, Ride etc.
   * @type string | undefined
   */
  type?: string | undefined
  /**
   * @description Sport type of activity. For example - Run, MountainBikeRide, Ride, etc.
   * @type string
   */
  sport_type: string
  /**
   * @description ISO 8601 formatted date time.
   * @type string, date-time
   */
  start_date_local: string
  /**
   * @description In seconds.
   * @type integer
   */
  elapsed_time: number
  /**
   * @description Description of the activity.
   * @type string | undefined
   */
  description?: string | undefined
  /**
   * @description In meters.
   * @type number | undefined, float
   */
  distance?: number | undefined
  /**
   * @description Set to 1 to mark as a trainer activity.
   * @type integer | undefined
   */
  trainer?: number | undefined
  /**
   * @description Set to 1 to mark as commute.
   * @type integer | undefined
   */
  commute?: number | undefined
}

export type CreateActivityMutationResponse = CreateActivity201

export type CreateActivityMutation = {
  Response: CreateActivity201
  Request: CreateActivityMutationRequest
  Errors: any
}

export type GetActivityByIdPathParams = {
  /**
   * @description The identifier of the activity.
   * @type integer, int64
   */
  id: number
}

export type GetActivityByIdQueryParams = {
  /**
   * @description To include all segments efforts.
   * @type boolean | undefined
   */
  include_all_efforts?: boolean | undefined
}

/**
 * @description The activity\'s detailed representation.
 */
export type GetActivityById200 = DetailedActivity

/**
 * @description Unexpected error.
 */
export type GetActivityByIdError = Fault

export type GetActivityByIdQueryResponse = GetActivityById200

export type GetActivityByIdQuery = {
  Response: GetActivityById200
  PathParams: GetActivityByIdPathParams
  QueryParams: GetActivityByIdQueryParams
  Errors: any
}

export type UpdateActivityByIdPathParams = {
  /**
   * @description The identifier of the activity.
   * @type integer, int64
   */
  id: number
}

/**
 * @description The activity\'s detailed representation.
 */
export type UpdateActivityById200 = DetailedActivity

/**
 * @description Unexpected error.
 */
export type UpdateActivityByIdError = Fault

export type UpdateActivityByIdMutationRequest = UpdatableActivity

export type UpdateActivityByIdMutationResponse = UpdateActivityById200

export type UpdateActivityByIdMutation = {
  Response: UpdateActivityById200
  Request: UpdateActivityByIdMutationRequest
  PathParams: UpdateActivityByIdPathParams
  Errors: any
}

export type GetLoggedInAthleteActivitiesQueryParams = {
  /**
   * @description An epoch timestamp to use for filtering activities that have taken place before a certain time.
   * @type integer | undefined
   */
  before?: number | undefined
  /**
   * @description An epoch timestamp to use for filtering activities that have taken place after a certain time.
   * @type integer | undefined
   */
  after?: number | undefined
  /**
   * @description Page number. Defaults to 1.
   * @type integer | undefined
   */
  page?: number | undefined
  /**
   * @description Number of items per page. Defaults to 30.
   * @default 30
   * @type integer | undefined
   */
  per_page?: number | undefined
}

/**
 * @description The authenticated athlete\'s activities
 */
export type GetLoggedInAthleteActivities200 = SummaryActivity[]

/**
 * @description Unexpected error.
 */
export type GetLoggedInAthleteActivitiesError = Fault

export type GetLoggedInAthleteActivitiesQueryResponse = GetLoggedInAthleteActivities200

export type GetLoggedInAthleteActivitiesQuery = {
  Response: GetLoggedInAthleteActivities200
  QueryParams: GetLoggedInAthleteActivitiesQueryParams
  Errors: any
}

export type GetLapsByActivityIdPathParams = {
  /**
   * @description The identifier of the activity.
   * @type integer, int64
   */
  id: number
}

/**
 * @description Activity Laps.
 */
export type GetLapsByActivityId200 = Lap[]

/**
 * @description Unexpected error.
 */
export type GetLapsByActivityIdError = Fault

export type GetLapsByActivityIdQueryResponse = GetLapsByActivityId200

export type GetLapsByActivityIdQuery = {
  Response: GetLapsByActivityId200
  PathParams: GetLapsByActivityIdPathParams
  Errors: any
}

export type GetZonesByActivityIdPathParams = {
  /**
   * @description The identifier of the activity.
   * @type integer, int64
   */
  id: number
}

/**
 * @description Activity Zones.
 */
export type GetZonesByActivityId200 = ActivityZone[]

/**
 * @description Unexpected error.
 */
export type GetZonesByActivityIdError = Fault

export type GetZonesByActivityIdQueryResponse = GetZonesByActivityId200

export type GetZonesByActivityIdQuery = {
  Response: GetZonesByActivityId200
  PathParams: GetZonesByActivityIdPathParams
  Errors: any
}

export type GetCommentsByActivityIdPathParams = {
  /**
   * @description The identifier of the activity.
   * @type integer, int64
   */
  id: number
}

export type GetCommentsByActivityIdQueryParams = {
  /**
   * @description Deprecated. Prefer to use after_cursor.
   * @type integer | undefined
   */
  page?: number | undefined
  /**
   * @description Deprecated. Prefer to use page_size.
   * @default 30
   * @type integer | undefined
   */
  per_page?: number | undefined
  /**
   * @description Number of items per page. Defaults to 30.
   * @default 30
   * @type integer | undefined
   */
  page_size?: number | undefined
  /**
   * @description Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched.
   * @type string | undefined
   */
  after_cursor?: string | undefined
}

/**
 * @description Comments.
 */
export type GetCommentsByActivityId200 = Comment[]

/**
 * @description Unexpected error.
 */
export type GetCommentsByActivityIdError = Fault

export type GetCommentsByActivityIdQueryResponse = GetCommentsByActivityId200

export type GetCommentsByActivityIdQuery = {
  Response: GetCommentsByActivityId200
  PathParams: GetCommentsByActivityIdPathParams
  QueryParams: GetCommentsByActivityIdQueryParams
  Errors: any
}

export type GetKudoersByActivityIdPathParams = {
  /**
   * @description The identifier of the activity.
   * @type integer, int64
   */
  id: number
}

export type GetKudoersByActivityIdQueryParams = {
  /**
   * @description Page number. Defaults to 1.
   * @type integer | undefined
   */
  page?: number | undefined
  /**
   * @description Number of items per page. Defaults to 30.
   * @default 30
   * @type integer | undefined
   */
  per_page?: number | undefined
}

/**
 * @description Comments.
 */
export type GetKudoersByActivityId200 = SummaryAthlete[]

/**
 * @description Unexpected error.
 */
export type GetKudoersByActivityIdError = Fault

export type GetKudoersByActivityIdQueryResponse = GetKudoersByActivityId200

export type GetKudoersByActivityIdQuery = {
  Response: GetKudoersByActivityId200
  PathParams: GetKudoersByActivityIdPathParams
  QueryParams: GetKudoersByActivityIdQueryParams
  Errors: any
}

export type GetClubByIdPathParams = {
  /**
   * @description The identifier of the club.
   * @type integer, int64
   */
  id: number
}

/**
 * @description The detailed representation of a club.
 */
export type GetClubById200 = DetailedClub

/**
 * @description Unexpected error.
 */
export type GetClubByIdError = Fault

export type GetClubByIdQueryResponse = GetClubById200

export type GetClubByIdQuery = {
  Response: GetClubById200
  PathParams: GetClubByIdPathParams
  Errors: any
}

export type GetClubMembersByIdPathParams = {
  /**
   * @description The identifier of the club.
   * @type integer, int64
   */
  id: number
}

export type GetClubMembersByIdQueryParams = {
  /**
   * @description Page number. Defaults to 1.
   * @type integer | undefined
   */
  page?: number | undefined
  /**
   * @description Number of items per page. Defaults to 30.
   * @default 30
   * @type integer | undefined
   */
  per_page?: number | undefined
}

/**
 * @description A list of club athlete representations.
 */
export type GetClubMembersById200 = ClubAthlete[]

/**
 * @description Unexpected error.
 */
export type GetClubMembersByIdError = Fault

export type GetClubMembersByIdQueryResponse = GetClubMembersById200

export type GetClubMembersByIdQuery = {
  Response: GetClubMembersById200
  PathParams: GetClubMembersByIdPathParams
  QueryParams: GetClubMembersByIdQueryParams
  Errors: any
}

export type GetClubAdminsByIdPathParams = {
  /**
   * @description The identifier of the club.
   * @type integer, int64
   */
  id: number
}

export type GetClubAdminsByIdQueryParams = {
  /**
   * @description Page number. Defaults to 1.
   * @type integer | undefined
   */
  page?: number | undefined
  /**
   * @description Number of items per page. Defaults to 30.
   * @default 30
   * @type integer | undefined
   */
  per_page?: number | undefined
}

/**
 * @description A list of summary athlete representations.
 */
export type GetClubAdminsById200 = SummaryAthlete[]

/**
 * @description Unexpected error.
 */
export type GetClubAdminsByIdError = Fault

export type GetClubAdminsByIdQueryResponse = GetClubAdminsById200

export type GetClubAdminsByIdQuery = {
  Response: GetClubAdminsById200
  PathParams: GetClubAdminsByIdPathParams
  QueryParams: GetClubAdminsByIdQueryParams
  Errors: any
}

export type GetClubActivitiesByIdPathParams = {
  /**
   * @description The identifier of the club.
   * @type integer, int64
   */
  id: number
}

export type GetClubActivitiesByIdQueryParams = {
  /**
   * @description Page number. Defaults to 1.
   * @type integer | undefined
   */
  page?: number | undefined
  /**
   * @description Number of items per page. Defaults to 30.
   * @default 30
   * @type integer | undefined
   */
  per_page?: number | undefined
}

/**
 * @description A list of activities.
 */
export type GetClubActivitiesById200 = ClubActivity[]

/**
 * @description Unexpected error.
 */
export type GetClubActivitiesByIdError = Fault

export type GetClubActivitiesByIdQueryResponse = GetClubActivitiesById200

export type GetClubActivitiesByIdQuery = {
  Response: GetClubActivitiesById200
  PathParams: GetClubActivitiesByIdPathParams
  QueryParams: GetClubActivitiesByIdQueryParams
  Errors: any
}

export type GetLoggedInAthleteClubsQueryParams = {
  /**
   * @description Page number. Defaults to 1.
   * @type integer | undefined
   */
  page?: number | undefined
  /**
   * @description Number of items per page. Defaults to 30.
   * @default 30
   * @type integer | undefined
   */
  per_page?: number | undefined
}

/**
 * @description A list of summary club representations.
 */
export type GetLoggedInAthleteClubs200 = SummaryClub[]

/**
 * @description Unexpected error.
 */
export type GetLoggedInAthleteClubsError = Fault

export type GetLoggedInAthleteClubsQueryResponse = GetLoggedInAthleteClubs200

export type GetLoggedInAthleteClubsQuery = {
  Response: GetLoggedInAthleteClubs200
  QueryParams: GetLoggedInAthleteClubsQueryParams
  Errors: any
}

export type GetGearByIdPathParams = {
  /**
   * @description The identifier of the gear.
   * @type string
   */
  id: string
}

/**
 * @description A representation of the gear.
 */
export type GetGearById200 = DetailedGear

/**
 * @description Unexpected error.
 */
export type GetGearByIdError = Fault

export type GetGearByIdQueryResponse = GetGearById200

export type GetGearByIdQuery = {
  Response: GetGearById200
  PathParams: GetGearByIdPathParams
  Errors: any
}

export type GetRouteByIdPathParams = {
  /**
   * @description The identifier of the route.
   * @type integer, int64
   */
  id: number
}

/**
 * @description A representation of the route.
 */
export type GetRouteById200 = Route

/**
 * @description Unexpected error.
 */
export type GetRouteByIdError = Fault

export type GetRouteByIdQueryResponse = GetRouteById200

export type GetRouteByIdQuery = {
  Response: GetRouteById200
  PathParams: GetRouteByIdPathParams
  Errors: any
}

export type GetRoutesByAthleteIdQueryParams = {
  /**
   * @description Page number. Defaults to 1.
   * @type integer | undefined
   */
  page?: number | undefined
  /**
   * @description Number of items per page. Defaults to 30.
   * @default 30
   * @type integer | undefined
   */
  per_page?: number | undefined
}

/**
 * @description A representation of the route.
 */
export type GetRoutesByAthleteId200 = Route[]

/**
 * @description Unexpected error.
 */
export type GetRoutesByAthleteIdError = Fault

export type GetRoutesByAthleteIdQueryResponse = GetRoutesByAthleteId200

export type GetRoutesByAthleteIdQuery = {
  Response: GetRoutesByAthleteId200
  QueryParams: GetRoutesByAthleteIdQueryParams
  Errors: any
}

export type GetRouteAsGPXPathParams = {
  /**
   * @description The identifier of the route.
   * @type integer, int64
   */
  id: number
}

/**
 * @description A GPX file with the route.
 */
export type GetRouteAsGPX200 = Blob

/**
 * @description Unexpected error.
 */
export type GetRouteAsGPXError = Fault

export type GetRouteAsGPXQueryResponse = GetRouteAsGPX200

export type GetRouteAsGPXQuery = {
  Response: GetRouteAsGPX200
  PathParams: GetRouteAsGPXPathParams
  Errors: any
}

export type GetRouteAsTCXPathParams = {
  /**
   * @description The identifier of the route.
   * @type integer, int64
   */
  id: number
}

/**
 * @description A TCX file with the route.
 */
export type GetRouteAsTCX200 = Blob

/**
 * @description Unexpected error.
 */
export type GetRouteAsTCXError = Fault

export type GetRouteAsTCXQueryResponse = GetRouteAsTCX200

export type GetRouteAsTCXQuery = {
  Response: GetRouteAsTCX200
  PathParams: GetRouteAsTCXPathParams
  Errors: any
}

/**
 * @description A representation of the created upload.
 */
export type CreateUpload201 = Upload

/**
 * @description Unexpected error.
 */
export type CreateUploadError = Fault

export const createUploadMutationRequestDataTypeEnum = {
  fit: 'fit',
  'fit.gz': 'fit.gz',
  tcx: 'tcx',
  'tcx.gz': 'tcx.gz',
  gpx: 'gpx',
  'gpx.gz': 'gpx.gz',
} as const

export type CreateUploadMutationRequestDataTypeEnum = (typeof createUploadMutationRequestDataTypeEnum)[keyof typeof createUploadMutationRequestDataTypeEnum]

export type CreateUploadMutationRequest = {
  /**
   * @description The uploaded file.
   * @type string | undefined, binary
   */
  file?: Blob | undefined
  /**
   * @description The desired name of the resulting activity.
   * @type string | undefined
   */
  name?: string | undefined
  /**
   * @description The desired description of the resulting activity.
   * @type string | undefined
   */
  description?: string | undefined
  /**
   * @description Whether the resulting activity should be marked as having been performed on a trainer.
   * @type string | undefined
   */
  trainer?: string | undefined
  /**
   * @description Whether the resulting activity should be tagged as a commute.
   * @type string | undefined
   */
  commute?: string | undefined
  /**
   * @description The format of the uploaded file.
   * @type string | undefined
   */
  data_type?: CreateUploadMutationRequestDataTypeEnum | undefined
  /**
   * @description The desired external identifier of the resulting activity.
   * @type string | undefined
   */
  external_id?: string | undefined
}

export type CreateUploadMutationResponse = CreateUpload201

export type CreateUploadMutation = {
  Response: CreateUpload201
  Request: CreateUploadMutationRequest
  Errors: any
}

export type GetUploadByIdPathParams = {
  /**
   * @description The identifier of the upload.
   * @type integer, int64
   */
  uploadId: number
}

/**
 * @description Representation of the upload.
 */
export type GetUploadById200 = Upload

/**
 * @description Unexpected error.
 */
export type GetUploadByIdError = Fault

export type GetUploadByIdQueryResponse = GetUploadById200

export type GetUploadByIdQuery = {
  Response: GetUploadById200
  PathParams: GetUploadByIdPathParams
  Errors: any
}

export type GetActivityStreamsPathParams = {
  /**
   * @description The identifier of the activity.
   * @type integer, int64
   */
  id: number
}

export const getActivityStreamsQueryParamsKeysEnum = {
  time: 'time',
  distance: 'distance',
  latlng: 'latlng',
  altitude: 'altitude',
  velocity_smooth: 'velocity_smooth',
  heartrate: 'heartrate',
  cadence: 'cadence',
  watts: 'watts',
  temp: 'temp',
  moving: 'moving',
  grade_smooth: 'grade_smooth',
} as const

export type GetActivityStreamsQueryParamsKeysEnum = (typeof getActivityStreamsQueryParamsKeysEnum)[keyof typeof getActivityStreamsQueryParamsKeysEnum]

export type GetActivityStreamsQueryParams = {
  /**
   * @description Desired stream types.
   * @type array
   */
  keys: GetActivityStreamsQueryParamsKeysEnum[]
  /**
   * @description Must be true.
   * @default true
   * @type boolean
   */
  key_by_type: boolean
}

/**
 * @description The set of requested streams.
 */
export type GetActivityStreams200 = StreamSet

/**
 * @description Unexpected error.
 */
export type GetActivityStreamsError = Fault

export type GetActivityStreamsQueryResponse = GetActivityStreams200

export type GetActivityStreamsQuery = {
  Response: GetActivityStreams200
  PathParams: GetActivityStreamsPathParams
  QueryParams: GetActivityStreamsQueryParams
  Errors: any
}

export type GetSegmentEffortStreamsPathParams = {
  /**
   * @description The identifier of the segment effort.
   * @type integer, int64
   */
  id: number
}

export const getSegmentEffortStreamsQueryParamsKeysEnum = {
  time: 'time',
  distance: 'distance',
  latlng: 'latlng',
  altitude: 'altitude',
  velocity_smooth: 'velocity_smooth',
  heartrate: 'heartrate',
  cadence: 'cadence',
  watts: 'watts',
  temp: 'temp',
  moving: 'moving',
  grade_smooth: 'grade_smooth',
} as const

export type GetSegmentEffortStreamsQueryParamsKeysEnum =
  (typeof getSegmentEffortStreamsQueryParamsKeysEnum)[keyof typeof getSegmentEffortStreamsQueryParamsKeysEnum]

export type GetSegmentEffortStreamsQueryParams = {
  /**
   * @description The types of streams to return.
   * @type array
   */
  keys: GetSegmentEffortStreamsQueryParamsKeysEnum[]
  /**
   * @description Must be true.
   * @default true
   * @type boolean
   */
  key_by_type: boolean
}

/**
 * @description The set of requested streams.
 */
export type GetSegmentEffortStreams200 = StreamSet

/**
 * @description Unexpected error.
 */
export type GetSegmentEffortStreamsError = Fault

export type GetSegmentEffortStreamsQueryResponse = GetSegmentEffortStreams200

export type GetSegmentEffortStreamsQuery = {
  Response: GetSegmentEffortStreams200
  PathParams: GetSegmentEffortStreamsPathParams
  QueryParams: GetSegmentEffortStreamsQueryParams
  Errors: any
}

export type GetSegmentStreamsPathParams = {
  /**
   * @description The identifier of the segment.
   * @type integer, int64
   */
  id: number
}

export const getSegmentStreamsQueryParamsKeysEnum = {
  distance: 'distance',
  latlng: 'latlng',
  altitude: 'altitude',
} as const

export type GetSegmentStreamsQueryParamsKeysEnum = (typeof getSegmentStreamsQueryParamsKeysEnum)[keyof typeof getSegmentStreamsQueryParamsKeysEnum]

export type GetSegmentStreamsQueryParams = {
  /**
   * @description The types of streams to return.
   * @type array
   */
  keys: GetSegmentStreamsQueryParamsKeysEnum[]
  /**
   * @description Must be true.
   * @default true
   * @type boolean
   */
  key_by_type: boolean
}

/**
 * @description The set of requested streams.
 */
export type GetSegmentStreams200 = StreamSet

/**
 * @description Unexpected error.
 */
export type GetSegmentStreamsError = Fault

export type GetSegmentStreamsQueryResponse = GetSegmentStreams200

export type GetSegmentStreamsQuery = {
  Response: GetSegmentStreams200
  PathParams: GetSegmentStreamsPathParams
  QueryParams: GetSegmentStreamsQueryParams
  Errors: any
}

export type GetRouteStreamsPathParams = {
  /**
   * @description The identifier of the route.
   * @type integer, int64
   */
  id: number
}

/**
 * @description The set of requested streams.
 */
export type GetRouteStreams200 = StreamSet

/**
 * @description Unexpected error.
 */
export type GetRouteStreamsError = Fault

export type GetRouteStreamsQueryResponse = GetRouteStreams200

export type GetRouteStreamsQuery = {
  Response: GetRouteStreams200
  PathParams: GetRouteStreamsPathParams
  Errors: any
}