/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../fetch.ts'
import type { RequestConfig, ResponseErrorConfig } from '../../../fetch.ts'
import type {
  GetStatsQueryResponse,
  GetStatsPathParams,
  GetLoggedInAthleteQueryResponse,
  UpdateLoggedInAthleteMutationResponse,
  UpdateLoggedInAthletePathParams,
  GetLoggedInAthleteZonesQueryResponse,
  GetSegmentByIdQueryResponse,
  GetSegmentByIdPathParams,
  GetLoggedInAthleteStarredSegmentsQueryResponse,
  GetLoggedInAthleteStarredSegmentsQueryParams,
  StarSegmentMutationRequest,
  StarSegmentMutationResponse,
  StarSegmentPathParams,
  GetEffortsBySegmentIdQueryResponse,
  GetEffortsBySegmentIdQueryParams,
  ExploreSegmentsQueryResponse,
  ExploreSegmentsQueryParams,
  GetSegmentEffortByIdQueryResponse,
  GetSegmentEffortByIdPathParams,
  CreateActivityMutationRequest,
  CreateActivityMutationResponse,
  GetActivityByIdQueryResponse,
  GetActivityByIdPathParams,
  GetActivityByIdQueryParams,
  UpdateActivityByIdMutationRequest,
  UpdateActivityByIdMutationResponse,
  UpdateActivityByIdPathParams,
  GetLoggedInAthleteActivitiesQueryResponse,
  GetLoggedInAthleteActivitiesQueryParams,
  GetLapsByActivityIdQueryResponse,
  GetLapsByActivityIdPathParams,
  GetZonesByActivityIdQueryResponse,
  GetZonesByActivityIdPathParams,
  GetCommentsByActivityIdQueryResponse,
  GetCommentsByActivityIdPathParams,
  GetCommentsByActivityIdQueryParams,
  GetKudoersByActivityIdQueryResponse,
  GetKudoersByActivityIdPathParams,
  GetKudoersByActivityIdQueryParams,
  GetClubByIdQueryResponse,
  GetClubByIdPathParams,
  GetClubMembersByIdQueryResponse,
  GetClubMembersByIdPathParams,
  GetClubMembersByIdQueryParams,
  GetClubAdminsByIdQueryResponse,
  GetClubAdminsByIdPathParams,
  GetClubAdminsByIdQueryParams,
  GetClubActivitiesByIdQueryResponse,
  GetClubActivitiesByIdPathParams,
  GetClubActivitiesByIdQueryParams,
  GetLoggedInAthleteClubsQueryResponse,
  GetLoggedInAthleteClubsQueryParams,
  GetGearByIdQueryResponse,
  GetGearByIdPathParams,
  GetRouteByIdQueryResponse,
  GetRouteByIdPathParams,
  GetRoutesByAthleteIdQueryResponse,
  GetRoutesByAthleteIdQueryParams,
  GetRouteAsGPXQueryResponse,
  GetRouteAsGPXPathParams,
  GetRouteAsTCXQueryResponse,
  GetRouteAsTCXPathParams,
  CreateUploadMutationRequest,
  CreateUploadMutationResponse,
  GetUploadByIdQueryResponse,
  GetUploadByIdPathParams,
  GetActivityStreamsQueryResponse,
  GetActivityStreamsPathParams,
  GetActivityStreamsQueryParams,
  GetSegmentEffortStreamsQueryResponse,
  GetSegmentEffortStreamsPathParams,
  GetSegmentEffortStreamsQueryParams,
  GetSegmentStreamsQueryResponse,
  GetSegmentStreamsPathParams,
  GetSegmentStreamsQueryParams,
  GetRouteStreamsQueryResponse,
  GetRouteStreamsPathParams,
} from './types.ts'

function getGetStatsUrl(id: GetStatsPathParams['id']) {
  return `https://www.strava.com/api/v3/athletes/${id}/stats` as const
}

/**
 * @description Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.
 * @summary Get Athlete Stats
 * {@link /athletes/:id/stats}
 */
export async function getStats(id: GetStatsPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetStatsQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: getGetStatsUrl(id).toString(), ...requestConfig })
  return res.data
}

function getGetLoggedInAthleteUrl() {
  return `https://www.strava.com/api/v3/athlete` as const
}

/**
 * @description Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
 * @summary Get Authenticated Athlete
 * {@link /athlete}
 */
export async function getLoggedInAthlete(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetLoggedInAthleteQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetLoggedInAthleteUrl().toString(),
    ...requestConfig,
  })
  return res.data
}

function getUpdateLoggedInAthleteUrl(weight: UpdateLoggedInAthletePathParams['weight']) {
  return `https://www.strava.com/api/v3/athlete` as const
}

/**
 * @description Update the currently authenticated athlete. Requires profile:write scope.
 * @summary Update Athlete
 * {@link /athlete}
 */
export async function updateLoggedInAthlete(
  weight: UpdateLoggedInAthletePathParams['weight'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<UpdateLoggedInAthleteMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'PUT',
    url: getUpdateLoggedInAthleteUrl(weight).toString(),
    ...requestConfig,
  })
  return res.data
}

function getGetLoggedInAthleteZonesUrl() {
  return `https://www.strava.com/api/v3/athlete/zones` as const
}

/**
 * @description Returns the the authenticated athlete's heart rate and power zones. Requires profile:read_all.
 * @summary Get Zones
 * {@link /athlete/zones}
 */
export async function getLoggedInAthleteZones(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetLoggedInAthleteZonesQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetLoggedInAthleteZonesUrl().toString(),
    ...requestConfig,
  })
  return res.data
}

function getGetSegmentByIdUrl(id: GetSegmentByIdPathParams['id']) {
  return `https://www.strava.com/api/v3/segments/${id}` as const
}

/**
 * @description Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
 * @summary Get Segment
 * {@link /segments/:id}
 */
export async function getSegmentById(id: GetSegmentByIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetSegmentByIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetSegmentByIdUrl(id).toString(),
    ...requestConfig,
  })
  return res.data
}

function getGetLoggedInAthleteStarredSegmentsUrl() {
  return `https://www.strava.com/api/v3/segments/starred` as const
}

/**
 * @description List of the authenticated athlete's starred segments. Private segments are filtered out unless requested by a token with read_all scope.
 * @summary List Starred Segments
 * {@link /segments/starred}
 */
export async function getLoggedInAthleteStarredSegments(
  params?: GetLoggedInAthleteStarredSegmentsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetLoggedInAthleteStarredSegmentsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetLoggedInAthleteStarredSegmentsUrl().toString(),
    params,
    ...requestConfig,
  })
  return res.data
}

function getStarSegmentUrl(id: StarSegmentPathParams['id']) {
  return `https://www.strava.com/api/v3/segments/${id}/starred` as const
}

/**
 * @description Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
 * @summary Star Segment
 * {@link /segments/:id/starred}
 */
export async function starSegment(
  id: StarSegmentPathParams['id'],
  data: StarSegmentMutationRequest,
  config: Partial<RequestConfig<StarSegmentMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<StarSegmentMutationResponse, ResponseErrorConfig<Error>, StarSegmentMutationRequest>({
    method: 'PUT',
    url: getStarSegmentUrl(id).toString(),
    data,
    ...requestConfig,
    headers: { 'Content-Type': 'application/x-www-form-urlencoded', ...requestConfig.headers },
  })
  return res.data
}

function getGetEffortsBySegmentIdUrl() {
  return `https://www.strava.com/api/v3/segment_efforts` as const
}

/**
 * @description Returns a set of the authenticated athlete's segment efforts for a given segment.  Requires subscription.
 * @summary List Segment Efforts
 * {@link /segment_efforts}
 */
export async function getEffortsBySegmentId(params: GetEffortsBySegmentIdQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetEffortsBySegmentIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetEffortsBySegmentIdUrl().toString(),
    params,
    ...requestConfig,
  })
  return res.data
}

function getExploreSegmentsUrl() {
  return `https://www.strava.com/api/v3/segments/explore` as const
}

/**
 * @description Returns the top 10 segments matching a specified query.
 * @summary Explore segments
 * {@link /segments/explore}
 */
export async function exploreSegments(params: ExploreSegmentsQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<ExploreSegmentsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getExploreSegmentsUrl().toString(),
    params,
    ...requestConfig,
  })
  return res.data
}

function getGetSegmentEffortByIdUrl(id: GetSegmentEffortByIdPathParams['id']) {
  return `https://www.strava.com/api/v3/segment_efforts/${id}` as const
}

/**
 * @description Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.
 * @summary Get Segment Effort
 * {@link /segment_efforts/:id}
 */
export async function getSegmentEffortById(id: GetSegmentEffortByIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetSegmentEffortByIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetSegmentEffortByIdUrl(id).toString(),
    ...requestConfig,
  })
  return res.data
}

function getCreateActivityUrl() {
  return `https://www.strava.com/api/v3/activities` as const
}

/**
 * @description Creates a manual activity for an athlete, requires activity:write scope.
 * @summary Create an Activity
 * {@link /activities}
 */
export async function createActivity(
  data: CreateActivityMutationRequest,
  config: Partial<RequestConfig<CreateActivityMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<CreateActivityMutationResponse, ResponseErrorConfig<Error>, CreateActivityMutationRequest>({
    method: 'POST',
    url: getCreateActivityUrl().toString(),
    data,
    ...requestConfig,
    headers: { 'Content-Type': 'application/x-www-form-urlencoded', ...requestConfig.headers },
  })
  return res.data
}

function getGetActivityByIdUrl(id: GetActivityByIdPathParams['id']) {
  return `https://www.strava.com/api/v3/activities/${id}` as const
}

/**
 * @description Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
 * @summary Get Activity
 * {@link /activities/:id}
 */
export async function getActivityById(
  id: GetActivityByIdPathParams['id'],
  params?: GetActivityByIdQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetActivityByIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetActivityByIdUrl(id).toString(),
    params,
    ...requestConfig,
  })
  return res.data
}

function getUpdateActivityByIdUrl(id: UpdateActivityByIdPathParams['id']) {
  return `https://www.strava.com/api/v3/activities/${id}` as const
}

/**
 * @description Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
 * @summary Update Activity
 * {@link /activities/:id}
 */
export async function updateActivityById(
  id: UpdateActivityByIdPathParams['id'],
  data?: UpdateActivityByIdMutationRequest,
  config: Partial<RequestConfig<UpdateActivityByIdMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<UpdateActivityByIdMutationResponse, ResponseErrorConfig<Error>, UpdateActivityByIdMutationRequest>({
    method: 'PUT',
    url: getUpdateActivityByIdUrl(id).toString(),
    data,
    ...requestConfig,
  })
  return res.data
}

function getGetLoggedInAthleteActivitiesUrl() {
  return `https://www.strava.com/api/v3/athlete/activities` as const
}

/**
 * @description Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
 * @summary List Athlete Activities
 * {@link /athlete/activities}
 */
export async function getLoggedInAthleteActivities(
  params?: GetLoggedInAthleteActivitiesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetLoggedInAthleteActivitiesQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetLoggedInAthleteActivitiesUrl().toString(),
    params,
    ...requestConfig,
  })
  return res.data
}

function getGetLapsByActivityIdUrl(id: GetLapsByActivityIdPathParams['id']) {
  return `https://www.strava.com/api/v3/activities/${id}/laps` as const
}

/**
 * @description Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
 * @summary List Activity Laps
 * {@link /activities/:id/laps}
 */
export async function getLapsByActivityId(id: GetLapsByActivityIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetLapsByActivityIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetLapsByActivityIdUrl(id).toString(),
    ...requestConfig,
  })
  return res.data
}

function getGetZonesByActivityIdUrl(id: GetZonesByActivityIdPathParams['id']) {
  return `https://www.strava.com/api/v3/activities/${id}/zones` as const
}

/**
 * @description Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
 * @summary Get Activity Zones
 * {@link /activities/:id/zones}
 */
export async function getZonesByActivityId(id: GetZonesByActivityIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetZonesByActivityIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetZonesByActivityIdUrl(id).toString(),
    ...requestConfig,
  })
  return res.data
}

function getGetCommentsByActivityIdUrl(id: GetCommentsByActivityIdPathParams['id']) {
  return `https://www.strava.com/api/v3/activities/${id}/comments` as const
}

/**
 * @description Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
 * @summary List Activity Comments
 * {@link /activities/:id/comments}
 */
export async function getCommentsByActivityId(
  id: GetCommentsByActivityIdPathParams['id'],
  params?: GetCommentsByActivityIdQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetCommentsByActivityIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetCommentsByActivityIdUrl(id).toString(),
    params,
    ...requestConfig,
  })
  return res.data
}

function getGetKudoersByActivityIdUrl(id: GetKudoersByActivityIdPathParams['id']) {
  return `https://www.strava.com/api/v3/activities/${id}/kudos` as const
}

/**
 * @description Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
 * @summary List Activity Kudoers
 * {@link /activities/:id/kudos}
 */
export async function getKudoersByActivityId(
  id: GetKudoersByActivityIdPathParams['id'],
  params?: GetKudoersByActivityIdQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetKudoersByActivityIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetKudoersByActivityIdUrl(id).toString(),
    params,
    ...requestConfig,
  })
  return res.data
}

function getGetClubByIdUrl(id: GetClubByIdPathParams['id']) {
  return `https://www.strava.com/api/v3/clubs/${id}` as const
}

/**
 * @description Returns a given club using its identifier.
 * @summary Get Club
 * {@link /clubs/:id}
 */
export async function getClubById(id: GetClubByIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetClubByIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetClubByIdUrl(id).toString(),
    ...requestConfig,
  })
  return res.data
}

function getGetClubMembersByIdUrl(id: GetClubMembersByIdPathParams['id']) {
  return `https://www.strava.com/api/v3/clubs/${id}/members` as const
}

/**
 * @description Returns a list of the athletes who are members of a given club.
 * @summary List Club Members
 * {@link /clubs/:id/members}
 */
export async function getClubMembersById(
  id: GetClubMembersByIdPathParams['id'],
  params?: GetClubMembersByIdQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetClubMembersByIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetClubMembersByIdUrl(id).toString(),
    params,
    ...requestConfig,
  })
  return res.data
}

function getGetClubAdminsByIdUrl(id: GetClubAdminsByIdPathParams['id']) {
  return `https://www.strava.com/api/v3/clubs/${id}/admins` as const
}

/**
 * @description Returns a list of the administrators of a given club.
 * @summary List Club Administrators
 * {@link /clubs/:id/admins}
 */
export async function getClubAdminsById(
  id: GetClubAdminsByIdPathParams['id'],
  params?: GetClubAdminsByIdQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetClubAdminsByIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetClubAdminsByIdUrl(id).toString(),
    params,
    ...requestConfig,
  })
  return res.data
}

function getGetClubActivitiesByIdUrl(id: GetClubActivitiesByIdPathParams['id']) {
  return `https://www.strava.com/api/v3/clubs/${id}/activities` as const
}

/**
 * @description Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
 * @summary List Club Activities
 * {@link /clubs/:id/activities}
 */
export async function getClubActivitiesById(
  id: GetClubActivitiesByIdPathParams['id'],
  params?: GetClubActivitiesByIdQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetClubActivitiesByIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetClubActivitiesByIdUrl(id).toString(),
    params,
    ...requestConfig,
  })
  return res.data
}

function getGetLoggedInAthleteClubsUrl() {
  return `https://www.strava.com/api/v3/athlete/clubs` as const
}

/**
 * @description Returns a list of the clubs whose membership includes the authenticated athlete.
 * @summary List Athlete Clubs
 * {@link /athlete/clubs}
 */
export async function getLoggedInAthleteClubs(params?: GetLoggedInAthleteClubsQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetLoggedInAthleteClubsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetLoggedInAthleteClubsUrl().toString(),
    params,
    ...requestConfig,
  })
  return res.data
}

function getGetGearByIdUrl(id: GetGearByIdPathParams['id']) {
  return `https://www.strava.com/api/v3/gear/${id}` as const
}

/**
 * @description Returns an equipment using its identifier.
 * @summary Get Equipment
 * {@link /gear/:id}
 */
export async function getGearById(id: GetGearByIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetGearByIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetGearByIdUrl(id).toString(),
    ...requestConfig,
  })
  return res.data
}

function getGetRouteByIdUrl(id: GetRouteByIdPathParams['id']) {
  return `https://www.strava.com/api/v3/routes/${id}` as const
}

/**
 * @description Returns a route using its identifier. Requires read_all scope for private routes.
 * @summary Get Route
 * {@link /routes/:id}
 */
export async function getRouteById(id: GetRouteByIdPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetRouteByIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetRouteByIdUrl(id).toString(),
    ...requestConfig,
  })
  return res.data
}

function getGetRoutesByAthleteIdUrl() {
  // @ts-expect-error invalid swagger definition
  return `https://www.strava.com/api/v3/athletes/${id}/routes` as const
}

/**
 * @description Returns a list of the routes created by the authenticated athlete. Private routes are filtered out unless requested by a token with read_all scope.
 * @summary List Athlete Routes
 * {@link /athletes/:id/routes}
 */
export async function getRoutesByAthleteId(params?: GetRoutesByAthleteIdQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetRoutesByAthleteIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetRoutesByAthleteIdUrl().toString(),
    params,
    ...requestConfig,
  })
  return res.data
}

function getGetRouteAsGPXUrl(id: GetRouteAsGPXPathParams['id']) {
  return `https://www.strava.com/api/v3/routes/${id}/export_gpx` as const
}

/**
 * @description Returns a GPX file of the route. Requires read_all scope for private routes.
 * @summary Export Route GPX
 * {@link /routes/:id/export_gpx}
 */
export async function getRouteAsGPX(id: GetRouteAsGPXPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetRouteAsGPXQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetRouteAsGPXUrl(id).toString(),
    ...requestConfig,
  })
  return res.data
}

function getGetRouteAsTCXUrl(id: GetRouteAsTCXPathParams['id']) {
  return `https://www.strava.com/api/v3/routes/${id}/export_tcx` as const
}

/**
 * @description Returns a TCX file of the route. Requires read_all scope for private routes.
 * @summary Export Route TCX
 * {@link /routes/:id/export_tcx}
 */
export async function getRouteAsTCX(id: GetRouteAsTCXPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetRouteAsTCXQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetRouteAsTCXUrl(id).toString(),
    ...requestConfig,
  })
  return res.data
}

function getCreateUploadUrl() {
  return `https://www.strava.com/api/v3/uploads` as const
}

/**
 * @description Uploads a new data file to create an activity from. Requires activity:write scope.
 * @summary Upload Activity
 * {@link /uploads}
 */
export async function createUpload(
  data?: CreateUploadMutationRequest,
  config: Partial<RequestConfig<CreateUploadMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const formData = new FormData()
  if (data) {
    Object.keys(data).forEach((key) => {
      const value = data[key as keyof typeof data]
      if (typeof key === 'string' && (typeof value === 'string' || (value as Blob) instanceof Blob)) {
        formData.append(key, value as unknown as string)
      }
    })
  }
  const res = await request<CreateUploadMutationResponse, ResponseErrorConfig<Error>, CreateUploadMutationRequest>({
    method: 'POST',
    url: getCreateUploadUrl().toString(),
    data: formData,
    ...requestConfig,
    headers: { 'Content-Type': 'multipart/form-data', ...requestConfig.headers },
  })
  return res.data
}

function getGetUploadByIdUrl(uploadId: GetUploadByIdPathParams['uploadId']) {
  return `https://www.strava.com/api/v3/uploads/${uploadId}` as const
}

/**
 * @description Returns an upload for a given identifier. Requires activity:write scope.
 * @summary Get Upload
 * {@link /uploads/:uploadId}
 */
export async function getUploadById(uploadId: GetUploadByIdPathParams['uploadId'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetUploadByIdQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetUploadByIdUrl(uploadId).toString(),
    ...requestConfig,
  })
  return res.data
}

function getGetActivityStreamsUrl(id: GetActivityStreamsPathParams['id']) {
  return `https://www.strava.com/api/v3/activities/${id}/streams` as const
}

/**
 * @description Returns the given activity's streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
 * @summary Get Activity Streams
 * {@link /activities/:id/streams}
 */
export async function getActivityStreams(
  id: GetActivityStreamsPathParams['id'],
  params: GetActivityStreamsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetActivityStreamsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetActivityStreamsUrl(id).toString(),
    params,
    ...requestConfig,
  })
  return res.data
}

function getGetSegmentEffortStreamsUrl(id: GetSegmentEffortStreamsPathParams['id']) {
  return `https://www.strava.com/api/v3/segment_efforts/${id}/streams` as const
}

/**
 * @description Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
 * @summary Get Segment Effort Streams
 * {@link /segment_efforts/:id/streams}
 */
export async function getSegmentEffortStreams(
  id: GetSegmentEffortStreamsPathParams['id'],
  params: GetSegmentEffortStreamsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetSegmentEffortStreamsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetSegmentEffortStreamsUrl(id).toString(),
    params,
    ...requestConfig,
  })
  return res.data
}

function getGetSegmentStreamsUrl(id: GetSegmentStreamsPathParams['id']) {
  return `https://www.strava.com/api/v3/segments/${id}/streams` as const
}

/**
 * @description Returns the given segment's streams. Requires read_all scope for private segments.
 * @summary Get Segment Streams
 * {@link /segments/:id/streams}
 */
export async function getSegmentStreams(
  id: GetSegmentStreamsPathParams['id'],
  params: GetSegmentStreamsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetSegmentStreamsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetSegmentStreamsUrl(id).toString(),
    params,
    ...requestConfig,
  })
  return res.data
}

function getGetRouteStreamsUrl(id: GetRouteStreamsPathParams['id']) {
  return `https://www.strava.com/api/v3/routes/${id}/streams` as const
}

/**
 * @description Returns the given route's streams. Requires read_all scope for private routes.
 * @summary Get Route Streams
 * {@link /routes/:id/streams}
 */
export async function getRouteStreams(id: GetRouteStreamsPathParams['id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetRouteStreamsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: getGetRouteStreamsUrl(id).toString(),
    ...requestConfig,
  })
  return res.data
}